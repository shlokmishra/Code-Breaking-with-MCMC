n1 <- sample(1:261, size = 1)
n2 <- n1*104/261
### PART D ###
n1 <- sample(1:261, size = 1)
n2 <- floor(n1*104/261)
### PART D ###
n1 <- sample(1:261, size = 1)
n2 <- floor(n1*104/261)
### PART D ###
n1 <- sample(1:261, size = 1)
n2 <- floor(n1*104/261)
### PART D ###
n1 <- sample(1:261, size = 1)
n2 <- ceiling(n1*104/261)
### PART D ###
n1 <- sample(1:261, size = 1)
n2 <- ceiling(n1*104/261)
sample_1 <- sample(weekdays, size = n1)
sample_2 <- sample(weekend, size = n2)
set.seed(1)
# 52 weeks => 52 weekends => 104 days in total
N1 <- 104
weekend <- numeric(length = N1)
# Remaining 365-104 = 261 working days of the year
N2 <- 261
weekdays <- numeric(length = N2)
weekend <- rpois(104,75)
weekend <- rpois(N1,75)
weekdays <- numeric(length = N2)
weekend <- rpois(N1,75)
weekdays <- rpois(N2,120)
# Remaining 365-104 = 261 working days of the year
N2 <- 261
set.seed(1)
# 52 weeks => 52 weekends => 104 days in total
N1 <- 104
weekend <- numeric(length = N1)
# Remaining 365-104 = 261 working days of the year
N2 <- 261
weekdays <- numeric(length = N2)
weekend <- rpois(N1,75)
weekdays <- rpois(N2,120)
all_days <- c(weekdays, weekend)
mean_all_days <- mean(all_days)
mean_weekdays <- mean(weekdays)
mean_weekends <- mean(weekend)
### PART B ###
calc_means <- function(n){
srswor <- sample(all_days, size = n, replace = FALSE)
mean_1 <- mean(srswor)
srswr <- sample(all_days, size = n, replace = TRUE)
mean_2 <- mean(srswr)
ans <- c(mean_1, mean_2)
return(ans)
}
### PART C ###
means_25 <- calc_means(25)
means_50 <- calc_means(50)
means_100 <- calc_means(100)
### PART D ###
n1 <- sample(1:261, size = 1)
### PART D ###
n1 <- sample(1:N2, size = 1)
n2 <- ceiling(n1*N2/N1)
### PART D ###
n1 <- sample(1:N2, size = 1)
n2 <- ceiling(n1*N2/N1)
sample_1 <- sample(weekdays, size = n1)
sample_2 <- sample(weekend, size = n2)
estimated_mean <-((N1*mean(sample_1))+(N2*mean(sample_2)))/(N1 + N2)
### PART D ###
n1 <- sample(1:N2, size = 1)
n2 <- ceiling(n1*N2/N1)
sample_1 <- sample(weekdays, size = n1)
sample_2 <- sample(weekend, size = n2)
estimated_mean <-((N1*mean(sample_1))+(N2*mean(sample_2)))/(N1 + N2)
### PART D ###
n1 <- sample(1:N2, size = 1)
n2 <- ceiling(n1*N2/N1)
set.seed(1)
# 52 weeks => 52 weekends => 104 days in total
N2 <- 104
set.seed(1)
# 52 weeks => 52 weekends => 104 days in total
N2 <- 104
weekend <- numeric(length = N2)
# Remaining 365-104 = 261 working days of the year
N1 <- 261
weekdays <- numeric(length = N1)
weekend <- rpois(N2,120)
weekdays <- rpois(N1,75)
all_days <- c(weekdays, weekend)
mean_all_days <- mean(all_days)
mean_weekdays <- mean(weekdays)
mean_weekends <- mean(weekend)
### PART B ###
calc_means <- function(n){
srswor <- sample(all_days, size = n, replace = FALSE)
mean_1 <- mean(srswor)
srswr <- sample(all_days, size = n, replace = TRUE)
mean_2 <- mean(srswr)
ans <- c(mean_1, mean_2)
return(ans)
}
### PART C ###
means_25 <- calc_means(25)
means_50 <- calc_means(50)
means_100 <- calc_means(100)
### PART D ###
n1 <- sample(1:N1, size = 1)
n2 <- ceiling(n1*N2/N1)
sample_1 <- sample(weekdays, size = n1)
sample_2 <- sample(weekend, size = n2)
estimated_mean <-((N1*mean(sample_1))+(N2*mean(sample_2)))/(N1 + N2)
### PART D ###
n1 <- sample(1:N1, size = 1)
n2 <- ceiling(n1*N2/N1)
sample_1 <- sample(weekdays, size = n1)
sample_2 <- sample(weekend, size = n2)
estimated_mean <-((N1*mean(sample_1))+(N2*mean(sample_2)))/(N1 + N2)
### PART D ###
n1 <- sample(1:N1, size = 1)
n2 <- ceiling(n1*N2/N1)
sample_1 <- sample(weekdays, size = n1)
sample_2 <- sample(weekend, size = n2)
estimated_mean <-((N1*mean(sample_1))+(N2*mean(sample_2)))/(N1 + N2)
### PART E ###
# var_all_days <- var(all_days)
sigma_1 <- sqrt(var(weekdays))
sigma_2 <- sqrt(var(weekend))
### PART E ###
# var_all_days <- var(all_days)
sigma_1 <- sqrt(var(weekdays))
sigma_2 <- sqrt(var(weekend))
n1 <- sample(1:N1, size = 1)
n2 <- ceiling(n1*N2*sigma_2/N1*sigma_1)
n2 <- ceiling((n1*N2*sigma_2)/(N1*sigma_1))
n1 <- sample(1:N1, size = 1)
n2 <- ceiling((n1*N2*sigma_2)/(N1*sigma_1))
n2 <- ceiling((n1*N2)/N1)
### PART A ###
set.seed(1)
# 52 weeks => 52 weekends => 104 days in total
N2 <- 104
weekend <- numeric(length = N2)
# Remaining 365-104 = 261 working days of the year
N1 <- 261
weekdays <- numeric(length = N1)
weekend <- rpois(N2,120)
weekdays <- rpois(N1,75)
all_days <- c(weekdays, weekend)
mean_all_days <- mean(all_days)
mean_weekdays <- mean(weekdays)
mean_weekends <- mean(weekend)
### PART B ###
calc_means <- function(n){
srswor <- sample(all_days, size = n, replace = FALSE)
mean_1 <- mean(srswor)
srswr <- sample(all_days, size = n, replace = TRUE)
mean_2 <- mean(srswr)
ans <- c(mean_1, mean_2)
return(ans)
}
### PART C ###
means_25 <- calc_means(25)
means_50 <- calc_means(50)
means_100 <- calc_means(100)
### PART D ###
n1_d <- sample(1:N1, size = 1)
n2_d <- ceiling((n1*N2)/N1)
sample_1_d <- sample(weekdays, size = n1_d)
sample_2_d <- sample(weekend, size = n2_d)
estimated_mean <-((N1*mean(sample_1_d))+(N2*mean(sample_2_d)))/(N1 + N2)
### PART E ###
# var_all_days <- var(all_days)
sigma_1 <- sqrt(var(weekdays))
sigma_2 <- sqrt(var(weekend))
n1_e <- sample(1:N1, size = 1)
n2_e <- ceiling((n1*N2*sigma_2)/(N1*sigma_1))
sample_1_e <- sample(weekdays, size = n1_e)
sample_2_e <- sample(weekend, size = n2_e)
estimated_mean <-((N1*mean(sample_1_e))+(N2*mean(sample_2_e)))/(N1 + N2)
### PART F ###
### PART A ###
set.seed(1)
# 52 weeks => 52 weekends => 104 days in total
N2 <- 104
weekend <- numeric(length = N2)
# Remaining 365-104 = 261 working days of the year
N1 <- 261
weekdays <- numeric(length = N1)
weekend <- rpois(N2,120)
weekdays <- rpois(N1,75)
all_days <- c(weekdays, weekend)
mean_all_days <- mean(all_days)
mean_weekdays <- mean(weekdays)
mean_weekends <- mean(weekend)
### PART B ###
calc_means <- function(n){
srswor <- sample(all_days, size = n, replace = FALSE)
mean_1 <- mean(srswor)
srswr <- sample(all_days, size = n, replace = TRUE)
mean_2 <- mean(srswr)
ans <- c(mean_1, mean_2)
return(ans)
}
### PART C ###
means_25 <- calc_means(25)
means_50 <- calc_means(50)
means_100 <- calc_means(100)
### PART D ###
n1_d <- sample(1:N1, size = 1)
n2_d <- ceiling((n1*N2)/N1)
sample_1_d <- sample(weekdays, size = n1_d)
sample_2_d <- sample(weekend, size = n2_d)
estimated_mean <-((N1*mean(sample_1_d))+(N2*mean(sample_2_d)))/(N1 + N2)
### PART E ###
# var_all_days <- var(all_days)
sigma_1 <- sqrt(var(weekdays))
sigma_2 <- sqrt(var(weekend))
n1_e <- sample(1:N1, size = 1)
n2_e <- ceiling((n1*N2*sigma_2)/(N1*sigma_1))
sample_1_e <- sample(weekdays, size = n1_e)
sample_2_e <- sample(weekend, size = n2_e)
estimated_mean <-((N1*mean(sample_1_e))+(N2*mean(sample_2_e)))/(N1 + N2)
### PART F ###
n2_d <- ceiling((n1*N2)/N1)
### PART A ###
set.seed(1)
# 52 weeks => 52 weekends => 104 days in total
N2 <- 104
weekend <- numeric(length = N2)
# Remaining 365-104 = 261 working days of the year
N1 <- 261
weekdays <- numeric(length = N1)
weekend <- rpois(N2,120)
weekdays <- rpois(N1,75)
all_days <- c(weekdays, weekend)
mean_all_days <- mean(all_days)
mean_weekdays <- mean(weekdays)
mean_weekends <- mean(weekend)
### PART B ###
calc_means <- function(n){
srswor <- sample(all_days, size = n, replace = FALSE)
mean_1 <- mean(srswor)
srswr <- sample(all_days, size = n, replace = TRUE)
mean_2 <- mean(srswr)
ans <- c(mean_1, mean_2)
return(ans)
}
### PART C ###
means_25 <- calc_means(25)
means_50 <- calc_means(50)
means_100 <- calc_means(100)
### PART D ###
n1_d <- sample(1:N1, size = 1)
n2_d <- ceiling((n1_d*N2)/N1)
sample_1_d <- sample(weekdays, size = n1_d)
sample_2_d <- sample(weekend, size = n2_d)
estimated_mean <-((N1*mean(sample_1_d))+(N2*mean(sample_2_d)))/(N1 + N2)
### PART E ###
# var_all_days <- var(all_days)
sigma_1 <- sqrt(var(weekdays))
sigma_2 <- sqrt(var(weekend))
n1_e <- sample(1:N1, size = 1)
n2_e <- ceiling((n1_e*N2*sigma_2)/(N1*sigma_1))
sample_1_e <- sample(weekdays, size = n1_e)
sample_2_e <- sample(weekend, size = n2_e)
estimated_mean <-((N1*mean(sample_1_e))+(N2*mean(sample_2_e)))/(N1 + N2)
### PART F ###
estimated_mean_d <-((N1*mean(sample_1_d))+(N2*mean(sample_2_d)))/(N1 + N2)
### PART A ###
set.seed(1)
# 52 weeks => 52 weekends => 104 days in total
N2 <- 104
weekend <- numeric(length = N2)
# Remaining 365-104 = 261 working days of the year
N1 <- 261
weekdays <- numeric(length = N1)
weekend <- rpois(N2,120)
weekdays <- rpois(N1,75)
all_days <- c(weekdays, weekend)
mean_all_days <- mean(all_days)
mean_weekdays <- mean(weekdays)
mean_weekends <- mean(weekend)
### PART B ###
calc_means <- function(n){
srswor <- sample(all_days, size = n, replace = FALSE)
mean_1 <- mean(srswor)
srswr <- sample(all_days, size = n, replace = TRUE)
mean_2 <- mean(srswr)
ans <- c(mean_1, mean_2)
return(ans)
}
### PART C ###
means_25 <- calc_means(25)
means_50 <- calc_means(50)
means_100 <- calc_means(100)
### PART D ###
n1_d <- sample(1:N1, size = 1)
n2_d <- ceiling((n1_d*N2)/N1)
sample_1_d <- sample(weekdays, size = n1_d)
sample_2_d <- sample(weekend, size = n2_d)
estimated_mean_d <-((N1*mean(sample_1_d))+(N2*mean(sample_2_d)))/(N1 + N2)
### PART E ###
# var_all_days <- var(all_days)
sigma_1 <- sqrt(var(weekdays))
sigma_2 <- sqrt(var(weekend))
n1_e <- sample(1:N1, size = 1)
n2_e <- ceiling((n1_e*N2*sigma_2)/(N1*sigma_1))
sample_1_e <- sample(weekdays, size = n1_e)
sample_2_e <- sample(weekend, size = n2_e)
estimated_mean_e <-((N1*mean(sample_1_e))+(N2*mean(sample_2_e)))/(N1 + N2)
### PART F ###
### PART B ###
n <- 100
mean_b <- mean(sample(all_days, size = n))
install.packages("doParallel")
library(doParallel)
detectCores()
library(doParallel)
no_cores <- detectCores() - 1
>?doParallel
?`doParallel-package`
?registerDoParallel
library(matlib)
install.packages(:matlib)
install.packages("matlib")
### Setting up library
library(matlib)
### Setting up library
library(matlib)
library(doParallel)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores, type="FORK")
getPrimeNumbers <- function(n) {
n <- as.integer(n)
if(n > 1e6) stop("n too large")
primes <- rep(TRUE, n)
primes[1] <- FALSE
last.prime <- 2L
for(i in last.prime:floor(sqrt(n)))
{
primes[seq.int(2L*last.prime, n, last.prime)] <- FALSE
last.prime <- last.prime + min(which(primes[(last.prime+1):n]))
}
which(primes)
}
registerDoParallel(cl)
result <- c()
index <- 10:100000
for (i in index) {
result[[i]] <- getPrimeNumbers(i)
}
index <- 10:100
for (i in index) {
result[[i]] <- getPrimeNumbers(i)
}
result
index <- 10:100
for (i in index) {
result[[i]] <- getPrimeNumbers(i)
}
result <- c()
index <- 10:100
for (i in index) {
result[[i]] <- getPrimeNumbers(i)
}
result
library(doParallel)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores, type="FORK")
registerDoParallel(cl)
result <- foreach(i=10:100) %dopar% getPrimeNumbers(i)
result <- c()
result <- foreach(i=10:100) %dopar% getPrimeNumbers(i)
source("function.R")
setwd("~/code/Code-Breaking-with-MCMC")
source("function.R")
plaintext <- "the quick brown fox jumps over the lazy dog there are eight billion people in this world"
result <- c()
result <- c()
all_possible_proposals
foreach(i=1:25) %:% foreach(j=(i+1):26) %dopar% {
temp_cipher <- swap_given_indicies(given_cipher,i,j)
all_possible_proposals[iter, 3] <- get_log_lik_text(decode_text(ciphered_text, temp_cipher))
}
all_possible_proposals
given_cipher <- generate_cipher()
foreach(i=1:25) %:% foreach(j=(i+1):26) %dopar% {
temp_cipher <- swap_given_indicies(given_cipher,i,j)
all_possible_proposals[iter, 3] <- get_log_lik_text(decode_text(ciphered_text, temp_cipher))
}
library(dplyr)
foreach(i=1:25) %:% foreach(j=(i+1):26) %dopar% {
temp_cipher <- swap_given_indicies(given_cipher,i,j)
all_possible_proposals[iter, 3] <- get_log_lik_text(decode_text(ciphered_text, temp_cipher))
}
foreach(i=1:25) %>% foreach(j=(i+1):26) %dopar% {
temp_cipher <- swap_given_indicies(given_cipher,i,j)
all_possible_proposals[iter, 3] <- get_log_lik_text(decode_text(ciphered_text, temp_cipher))
}
library(purrr)
library(Rcpp)
library(doParallel)
library(dplyr)
foreach(i=1:25) %>% foreach(j=(i+1):26) %dopar% {
temp_cipher <- swap_given_indicies(given_cipher,i,j)
all_possible_proposals[iter, 3] <- get_log_lik_text(decode_text(ciphered_text, temp_cipher))
}
library(magrittr)
foreach(i=1:25) %>% foreach(j=(i+1):26) %dopar% {
temp_cipher <- swap_given_indicies(given_cipher,i,j)
all_possible_proposals[iter, 3] <- get_log_lik_text(decode_text(ciphered_text, temp_cipher))
}
library(doParallel)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores, type="FORK")
registerDoParallel(cl)
foreach(i=1:25) %>% foreach(j=(i+1):26) %dopar% {
temp_cipher <- swap_given_indicies(given_cipher,i,j)
all_possible_proposals[iter, 3] <- get_log_lik_text(decode_text(ciphered_text, temp_cipher))
}
true_cipher <- generate_cipher()
ciphered_text <- encode_text(text = plaintext,
cipher = true_cipher)
foreach(i=1:25) %>% foreach(j=(i+1):26) %dopar% {
temp_cipher <- swap_given_indicies(given_cipher,i,j)
all_possible_proposals[iter, 3] <- get_log_lik_text(decode_text(ciphered_text, temp_cipher))
}
foreach(i=1:25) %:% foreach(j=(i+1):26) %dopar% {
temp_cipher <- swap_given_indicies(given_cipher,i,j)
all_possible_proposals[iter, 3] <- get_log_lik_text(decode_text(ciphered_text, temp_cipher))
}
result <- c()
result <- foreach(i=1:3) %:% foreach(j=1:3) %dopar% {
i*j
}
result
result <- c()
result <- foreach(i=1:25) %:% foreach(j=(i+1):26) %dopar% {
get_log_lik_text(decode_text(ciphered_text, given_cipher))
}
result
all_possible_proposals[,3] <- result
length(result)
unlist(result)
all_possible_proposals[,3] <- result
length(result)
all_possible_proposals[-1,3] <- result
all_possible_proposals
all_possible_proposals
all_possible_proposals <- compute_all_scores()
all_possible_proposals
all_possible_proposals[-1,3]
unlist(result)
length(all_possible_proposals[-1,3])
all_possible_proposals[-1,3] <- result
all_possible_proposals
all_possible_proposals[[1]]
all_possible_proposals[[2]]
all_possible_proposals[[3]]
all_possible_proposals[[3]][1]
all_possible_proposals[[3]][[1]]
all_possible_proposals <- compute_all_scores()
a <- matrix(1:10, nrow = 5, ncol = 2)
a
a[,2]
a
a[,2] <- c(12,12,12,12,12)
a
length(result)
unlist(result)
length(result)
unlist(result)
all_possible_proposals
all_possible_proposals[2:326,3] <- unlist(result)
all_possible_proposals
# profvis({
source("function.R")
# profvis({
source("function.R")
# Choose a value of n which will be the number of iterations
n <- 500
# Choose the string which you would like to encrypt and then decrypt using metropolis algorithm
plaintext <- "the quick brown fox jumps over the lazy dog there are eight billion people in this world"
true_cipher <- generate_cipher()
ciphered_text <- encode_text(text = plaintext,
cipher = true_cipher)
decoded_text_bestModified <- decrypt_metropModified(ciphered_text, n)
# profvis({
source("function.R")
# Choose a value of n which will be the number of iterations
n <- 50
# Choose the string which you would like to encrypt and then decrypt using metropolis algorithm
plaintext <- "the quick brown fox jumps over the lazy dog there are eight billion people in this world"
true_cipher <- generate_cipher()
ciphered_text <- encode_text(text = plaintext,
cipher = true_cipher)
decoded_text_best <- decrypt_metrop(ciphered_text, n)
decoded_text_bestReg <- decrypt_metropReg(ciphered_text, 1e4)
decoded_text_bestModified <- decrypt_metropModified(ciphered_text, n)
# all_possible_proposals[1,1:2] <- c(1,1)
all_possible_proposals[1,3] <- get_log_lik_text(decode_text(ciphered_text, given_cipher))
iter = 1
# profvis({
source("function.R")
# all_possible_proposals[1,1:2] <- c(1,1)
all_possible_proposals[1,3] <- get_log_lik_text(decode_text(ciphered_text, given_cipher))
true_cipher <- generate_cipher()
ciphered_text <- encode_text(text = plaintext,
cipher = true_cipher)
