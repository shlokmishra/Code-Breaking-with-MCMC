setwd("~/code/Code-Breaking-with-MCMC")
source("function.R")
source("function.R")
letters |> paste(collapse = "")
letters
letters %>% paste(collapse = "")
letters >%> paste(collapse = "")
letters >%>> paste(collapse = "")
install.packages("dplyr")
# install.packages("dplyr")
library(dplyr)
letters |> paste(collapse = "")
letters | paste(collapse = "")
letters %>% paste(collapse = "")
source("function.R")
# Choose a value of n which will be the number of iterations
n <- 100
# Choose the string which you would like to encrypt and then decrypt using metropolis algorithm
giventext <- "this is a sample peice of text and i am really glad that this code can easily crack it"
decoded_text_best <- encrypt_decrypt_using_metropolis(giventext)
library(purrr)
source("function.R")
# Choose a value of n which will be the number of iterations
n <- 100
# Choose the string which you would like to encrypt and then decrypt using metropolis algorithm
giventext <- "this is a sample peice of text and i am really glad that this code can easily crack it"
decoded_text_best <- encrypt_decrypt_using_metropolis(giventext)
paste("The best decoded text reached in" , n , "iterations is: '", decoded_text_best, "' ")
decoded_text_best
paste("The best decoded text reached in" , n , "iterations is: '")
decoded_text_best
# Choose a value of n which will be the number of iterations
n <- 1000
# Choose the string which you would like to encrypt and then decrypt using metropolis algorithm
giventext <- "this is a sample peice of text and i am really glad that this code can easily crack it"
decoded_text_best <- encrypt_decrypt_using_metropolis(giventext)
paste("The best decoded text reached in" , n , "iterations is: '")
decoded_text_best
giventext <- "this is a sample peice of text and i am really glad that this code can easily crack it"
giventext[1]
strsplit(giventext)
giventext <- "this is a sample peice of text and i am really glad that this code can easily crack it"
splt_text <- strsplit(giventext)
splt_text <- strsplit(giventext, "")
splt_text
split_text[1]
split_text[[1]]
giventext <- "this is a sample peice of text and i am really glad that this code can easily crack it"
split_text <- strsplit(giventext, "")
split_text[[1]]
split_text[[1]][1]
split_text[[1]][2]
split_text[1][2]
split_text[[1]][2]
split_text[[1]][2]
if((split_text[[1]][1] == "a" || split_text[[1]][1] == "i")  && split_text[[1]][1] == " "){
print("TRUE")
}
else{
print("FALSE")
}
if((split_text[[1]][1] == "a" || split_text[[1]][1] == "i")  && split_text[[1]][1] == " "){
print("TRUE")
}
giventext <- "i this is a sample peice of text and i am really glad that this code can easily crack it"
split_text <- strsplit(giventext, "")
split_text[[1]][2]
if((split_text[[1]][1] == "a" || split_text[[1]][1] == "i")  && split_text[[1]][1] == " "){
print("TRUE")
}
giventext <- "i this is a sample peice of text and i am really glad that this code can easily crack it"
split_text <- strsplit(giventext, "")
split_text[[1]][2]
if((split_text[[1]][1] == "a" || split_text[[1]][1] == "i")  && split_text[[1]][1] == " "){
print("TRUE")
}
giventext <- "i this is a sample peice of text and i am really glad that this code can easily crack it"
split_text <- strsplit(giventext, "")
split_text[[1]][2]
if((split_text[[1]][1] == "a" || split_text[[1]][1] == "i")  && split_text[[1]][2] == " "){
print("TRUE")
}
giventext <- "ithis is a sample peice of text and i am really glad that this code can easily crack it"
split_text <- strsplit(giventext, "")
split_text[[1]][2]
if((split_text[[1]][1] == "a" || split_text[[1]][1] == "i")  && split_text[[1]][2] == " "){
print("TRUE")
}
giventext <- "a this is a sample peice of text and i am really glad that this code can easily crack it"
split_text <- strsplit(giventext, "")
# split_text[[1]][2]
if((split_text[[1]][1] == "a" || split_text[[1]][1] == "i")  && split_text[[1]][2] == " "){
print("TRUE")
}
length(split_text)
length(split_text[[1]])
paste(letters, collapse = "")
encode_text <- function(text, cipher) {
chartr(
x = text,
old = paste(letters, collapse = ""),
new = paste(cipher, collapse = "")
)
}
generate_cipher <- function() sample(letters,
replace = FALSE)
encode_text <- function(text, cipher) {
chartr(
x = text,
old = paste(letters, collapse = ""),
new = paste(cipher, collapse = "")
)
}
deocde_this <- encode_text(giventext, generate_cipher())
decocde_this <- encode_text(giventext, generate_cipher())
giventext <- "a this is a sample peice of text and i am really glad that this code can easily crack it"
generate_cipher <- function() sample(letters,
replace = FALSE)
encode_text <- function(text, cipher) {
chartr(
x = text,
old = paste(letters, collapse = ""),
new = paste(cipher, collapse = "")
)
}
decocde_this <- encode_text(giventext, generate_cipher())
split_text <- strsplit(decode_this, "")
decode_this <- encode_text(giventext, generate_cipher())
split_text <- strsplit(decode_this, "")
len <- length(split_text[[1]])
paste(letters, collapse = "")
swap <- function(x){
# Select two distinct indices
rand_indices <- sample(1:length(x), size = 2, replace=FALSE)
element_1 <- x[rand_indices[1]]
element_2 <- x[rand_indices[2]]
x[rand_indices[1]] <- element_2
x[rand_indices[2]] <- element_1
return(x)
}
current_cipher <- generate_cipher()
giventext <- "a this is a sample peice of text and i am really glad that this code can easily crack it"
generate_cipher <- function() sample(letters,
replace = FALSE)
encode_text <- function(text, cipher) {
chartr(
x = text,
old = paste(letters, collapse = ""),
new = paste(cipher, collapse = "")
)
}
swap <- function(x){
# Select two distinct indices
rand_indices <- sample(1:length(x), size = 2, replace=FALSE)
element_1 <- x[rand_indices[1]]
element_2 <- x[rand_indices[2]]
x[rand_indices[1]] <- element_2
x[rand_indices[2]] <- element_1
return(x)
}
decode_this <- encode_text(giventext, generate_cipher())
split_text <- strsplit(decode_this, "")
len <- length(split_text[[1]])
current_cipher <- generate_cipher()
which(w == letters)
which("w" == letters)
# which("w" == letters)
letters[23]
# which("w" == letters)
letters[9]
