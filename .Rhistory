iter = 1
for( i in 1:26){
for(j in i:26){
iter = iter + 1
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, ] <- temp_cipher
}
}
current_cipher[1]
current_cipher[26]
for( i in 1:26){
for(j in i+1:26){
iter = iter + 1
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, ] <- temp_cipher
}
}
temp_cipher <- current_cipher
temp_cipher[1]
temp_cipher[26]
for( i in 1:26){
for(j in i+1:26){
iter = iter + 1
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, ] <- temp_cipher
}
}
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, ] <- temp_cipher
all_possible_proposals[1, ] <- temp_cipher
all_possible_proposals
all_possible_proposals <- matrix(NA, nrow = 325, ncol = 26)
all_possible_proposals[1,] <- current_cipher
all_possible_proposals[1,]
iter = 1
for( i in 1:26){
for(j in i+1:26){
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, ] <- temp_cipher
iter = iter + 1
}
}
all_possible_proposals <- matrix(NA, nrow = 329, ncol = 26)
all_possible_proposals[1,] <- current_cipher
all_possible_proposals[1,]
iter = 1
for( i in 1:26){
for(j in i+1:26){
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, ] <- temp_cipher
iter = iter + 1
}
}
all_possible_proposals
all_possible_proposals <- matrix(NA, nrow = 329, ncol = 26)
all_possible_proposals[1,]
all_possible_proposals[1,] <- current_cipher
all_possible_proposals[1,]
for( i in 1:26){
for(j in i+1:26){
iter = iter + 1
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, ] <- temp_cipher
}
}
all_possible_proposals <- matrix(NA, ncol = 26)
all_possible_proposals[1,] <- current_cipher
all_possible_proposals[1,]
iter = 1
for( i in 1:26){
for(j in i+1:26){
iter = iter + 1
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, ] <- temp_cipher
}
}
iter = 1
iter++
for( i in 1:26){
for(j in i+1:26){
iter = iter + 1
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, ] <- temp_cipher
}
}
iter++
for( i in 1:26){
for(j in i+1:26){
iter = iter + 1
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, ] <- temp_cipher
}
}
iter++
for( i in 1:26){
for(j in i+1:26){
iter = iter + 1
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, ] <- temp_cipher
}
}
iter++
for( i in 1:26){
for(j in i+1:26){
iter = iter + 1
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, ] <- temp_cipher
}
}
all_possible_proposals
all_possible_proposals[31,]
all_possible_proposals <- matrix(NA,nrow = 400 ,ncol = 26)
all_possible_proposals[1,] <- current_cipher
all_possible_proposals[1,]
iter = 1
iter++
for( i in 1:26){
for(j in i+1:26){
iter = iter + 1
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, ] <- temp_cipher
}
}
iter = 1
iter = iter + 1
iter = iter + 1
iter = iter + 1
iter = 1
for( i in 1:26){
for(j in i+1:26){
iter = iter + 1
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, ] <- temp_cipher
}
}
all_possible_proposals[31,]
all_possible_proposals[2,]
all_possible_proposals[25,]
all_possible_proposals[26,]
all_possible_proposals[27,]
6:6
for( i in 1:25){
for(j in i+1:26){
iter = iter + 1
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, ] <- temp_cipher
}
}
for( i in 1:25){
for(j in i+1:26){
iter = iter + 1
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, ] <- temp_cipher
}
}
all_possible_proposals[27,]
all_possible_proposals[26,]
all_possible_proposals[1,] <- current_cipher
all_possible_proposals[1,]
iter = 1
for( i in 1:25){
for(j in i+1:26){
iter = iter + 1
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, ] <- temp_cipher
}
}
all_possible_proposals[26,]
all_possible_proposals[27,]
all_possible_proposals[1, 1:26] <- current_cipher
all_possible_proposals[1,]
for( i in 1:25){
for(j in i+1:26){
iter = iter + 1
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, 1:26] <- temp_cipher
}
}
all_possible_proposals[26,]
all_possible_proposals[27,]
all_possible_proposals[1, 1:26] <- current_cipher
all_possible_proposals[1,]
all_possible_proposals[1,27]
all_possible_proposals[1,1]
all_possible_proposals[1,2]
all_possible_proposals <- matrix(NA,nrow = 400 ,ncol = 27)
all_possible_proposals[1, 1:26] <- current_cipher
all_possible_proposals[1,2]
all_possible_proposals[1,27]
all_possible_proposals[1,27]
iter = 1
for( i in 1:25){
for(j in i+1:26){
iter = iter + 1
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, 1:26] <- temp_cipher
}
}
for( i in 1:25){
for(j in i+1:26){
iter = iter + 1
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, 1:26] <- temp_cipher
get_log_lik_text(decode_text(ciphered_text, temp_cipher))
}
}
all_possible_proposals[26,]
all_possible_proposals[5,]
for( i in 1:25){
for(j in i+1:26){
iter = iter + 1
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, 1:26] <- temp_cipher
all_possible_proposals[iter, 27] <- get_log_lik_text(decode_text(ciphered_text, temp_cipher))
}
}
all_possible_proposals[5,]
all_possible_proposals[26,]
all_possible_proposals[27,]
all_possible_proposals <- matrix(NA,nrow = 400 ,ncol = 27)
all_possible_proposals[1, 1:26] <- current_cipher
all_possible_proposals[1,27]
iter = 1
setwd("~/code/Code-Breaking-with-MCMC")
source("function.R")
plaintext <- "the quick brown fox jumps over the lazy dog there are eight billion people in this world"
true_cipher <- generate_cipher()
ciphered_text <- encode_text(text = plaintext,
cipher = true_cipher)
current_cipher <- generate_cipher()
total_possibilities <- choose(26,2)
current_cipher[2]
all_possible_proposals <- matrix(NA,nrow = 400 ,ncol = 27)
all_possible_proposals[1, 1:26] <- current_cipher
all_possible_proposals[iter, 27] <- get_log_lik_text(decode_text(ciphered_text, temp_cipher))
all_possible_proposals[iter, 27] <- get_log_lik_text(decode_text(ciphered_text, current_cipher))
all_possible_proposals[1, 27] <- get_log_lik_text(decode_text(ciphered_text, current_cipher))
all_possible_proposals[1,]
iter = 1
for( i in 1:25){
for(j in i+1:26){
iter = iter + 1
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, 1:26] <- temp_cipher
all_possible_proposals[iter, 27] <- get_log_lik_text(decode_text(ciphered_text, temp_cipher))
}
}
all_possible_proposals[5,]
all_possible_proposals[26,]
all_possible_proposals[27,]
all_possible_proposals[,27]
all_possible_proposals[25,]
all_possible_proposals[26,]
current_cipher
for( i in 1:25){
for(j in (i+1):26){
iter = iter + 1
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, 1:26] <- temp_cipher
all_possible_proposals[iter, 27] <- get_log_lik_text(decode_text(ciphered_text, temp_cipher))
}
}
current_cipher
all_possible_proposals[,27]
all_possible_proposals <- matrix(NA,nrow = 355 ,ncol = 27)
all_possible_proposals[1, 1:26] <- current_cipher
all_possible_proposals[1, 27] <- get_log_lik_text(decode_text(ciphered_text, current_cipher))
all_possible_proposals[1,]
iter = 1
for( i in 1:25){
for(j in (i+1):26){
iter = iter + 1
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, 1:26] <- temp_cipher
all_possible_proposals[iter, 27] <- get_log_lik_text(decode_text(ciphered_text, temp_cipher))
}
}
current_cipher
all_possible_proposals[,27]
all_possible_proposals <- matrix(NA,nrow = 330 ,ncol = 27)
all_possible_proposals[1, 1:26] <- current_cipher
all_possible_proposals[1, 27] <- get_log_lik_text(decode_text(ciphered_text, current_cipher))
all_possible_proposals[1,]
iter = 1
for( i in 1:25){
for(j in (i+1):26){
iter = iter + 1
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, 1:26] <- temp_cipher
all_possible_proposals[iter, 27] <- get_log_lik_text(decode_text(ciphered_text, temp_cipher))
}
}
current_cipher
all_possible_proposals[,27]
?sample()
sample(1:6, size = 2, prob = 0.1)
sample(1:6, size = 2, prob = 0.1/6)
prob <- rep(0,3)
prob <- rep(1/6,6)
sample(1:6, size = 2, prob)
sample(1:6, size = 2, prob, replace = TRUE)
sample(1:6, size = 2, prob, replace = TRUE)
sample(1:6, size = 1, prob, replace = TRUE)
all_possible_proposals[,27]
sum(all_possible_proposals[,27])
all_possible_proposals <- matrix(NA,nrow = 326 ,ncol = 27)
all_possible_proposals[1, 1:26] <- current_cipher
all_possible_proposals[1, 27] <- get_log_lik_text(decode_text(ciphered_text, current_cipher))
all_possible_proposals[1,]
iter = 1
for( i in 1:25){
for(j in (i+1):26){
iter = iter + 1
temp_cipher <- current_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, 1:26] <- temp_cipher
all_possible_proposals[iter, 27] <- get_log_lik_text(decode_text(ciphered_text, temp_cipher))
}
}
sum(all_possible_proposals[,27])
all_possible_proposals[,27]
sum(all_possible_proposals[,27])
all_scores <- as.numeric(all_possible_proposals[,27])
all_scores
sum(all_scores)
length(all_scores)
prob <- all_scores/sum(all_scores)
sample(1:326, size = 1, prob, replace = TRUE)
sample(1:326, size = 1, prob, replace = TRUE)
sample(1:326, size = 1, prob, replace = TRUE)
sample(1:326, size = 1, prob, replace = TRUE)
sample(1:326, size = 1, prob, replace = TRUE)
sample(1:326, size = 1, prob, replace = TRUE)
sample(1:326, size = 1, prob, replace = TRUE)
max(all_scores)
which(max(all_scores))
?which
sample(1:326, size = 1, prob, replace = TRUE)
sample(1:326, size = 1, prob, replace = TRUE)
new_proposal <- sample(1:326, size = 1, prob, replace = TRUE)
proposed_cipher <- all_possible_proposals[new_proposal, 1:26]
proposed_cipher
}
source("function.R")
plaintext <- "the quick brown fox jumps over the lazy dog there are eight billion people in this world"
true_cipher <- generate_cipher()
ciphered_text <- encode_text(text = plaintext,
cipher = true_cipher)
current_cipher <- generate_cipher()
total_possibilities <- choose(26,2)
new_sampling_way <- function(given_cipher){
all_possible_proposals <- matrix(NA,nrow = 326 ,ncol = 27)
all_possible_proposals[1, 1:26] <- given_cipher
all_possible_proposals[1, 27] <- get_log_lik_text(decode_text(ciphered_text, given_cipher))
# all_possible_proposals[1,]
iter = 1
for( i in 1:25){
for(j in (i+1):26){
iter = iter + 1
temp_cipher <- given_cipher
element_1 <- temp_cipher[i]
element_2 <- temp_cipher[j]
temp_cipher[i] <- element_2
temp_cipher[j] <- element_1
all_possible_proposals[iter, 1:26] <- temp_cipher
all_possible_proposals[iter, 27] <- get_log_lik_text(decode_text(ciphered_text, temp_cipher))
}
}
all_scores <- as.numeric(all_possible_proposals[,27])
sum(all_scores)
length(all_scores)
prob <- all_scores/sum(all_scores)
new_proposal <- sample(1:326, size = 1, prob, replace = TRUE)
proposed_cipher <- all_possible_proposals[new_proposal, 1:26]
proposed_cipher
}
new_sampling_way(current_cipher)
source("function.R")
# Choose a value of n which will be the number of iterations
n <- 50000
# Choose the string which you would like to encrypt and then decrypt using metropolis algorithm
plaintext <- "the quick brown fox jumps over the lazy dog there are eight billion people in this world"
true_cipher <- generate_cipher()
ciphered_text <- encode_text(text = plaintext,
cipher = true_cipher)
decoded_text_best <- encrypt_decrypt_using_metropolis(ciphered_text, n)
# Choose a value of n which will be the number of iterations
n <- 100
# Choose the string which you would like to encrypt and then decrypt using metropolis algorithm
plaintext <- "the quick brown fox jumps over the lazy dog there are eight billion people in this world"
true_cipher <- generate_cipher()
ciphered_text <- encode_text(text = plaintext,
cipher = true_cipher)
decoded_text_best <- encrypt_decrypt_using_metropolis(ciphered_text, n)
paste("The best decoded text reached in" , n , "iterations is: '")
decoded_text_best[[1]]
plot.ts(decoded_text_best[[2]])
abline(h=get_log_lik_text(plaintext), col = "red")
abline(h=get_log_lik_text(plaintext), col = "red")
plot.ts(decoded_text_best[[2]])
abline(h=get_log_lik_text(plaintext), col = "red")
# Choose a value of n which will be the number of iterations
n <- 5000
# Choose the string which you would like to encrypt and then decrypt using metropolis algorithm
plaintext <- "the quick brown fox jumps over the lazy dog there are eight billion people in this world"
true_cipher <- generate_cipher()
ciphered_text <- encode_text(text = plaintext,
cipher = true_cipher)
decoded_text_best <- encrypt_decrypt_using_metropolis(ciphered_text, n)
