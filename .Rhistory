source("function.R")
# Choose a value of n which will be the number of iterations
n <- 100
# Choose the string which you would like to encrypt and then decrypt using metropolis algorithm
giventext <- "this is a sample peice of text and i am really glad that this code can easily crack it"
decoded_text_best <- encrypt_decrypt_using_metropolis(giventext, n)
paste("The best decoded text reached in" , n , "iterations is: '")
decoded_text_best
plot.ts()
decoded_text_best[[2]]
decoded_text_best[[1]]
plot.ts(decoded_text_best[[2]])
source("function.R")
# Choose a value of n which will be the number of iterations
n <- 1000
# Choose the string which you would like to encrypt and then decrypt using metropolis algorithm
giventext <- "this is a sample peice of text and i am really glad that this code can easily crack it"
decoded_text_best <- encrypt_decrypt_using_metropolis(giventext, n)
paste("The best decoded text reached in" , n , "iterations is: '")
decoded_text_best[[1]]
plot.ts(decoded_text_best[[2]])
plot.ts(decoded_text_best[[2]])
?plot
plot(decoded_text_best[[2]])
hist(decoded_text_best[[2]])
barplot(decoded_text_best[[2]])
# Choose a value of n which will be the number of iterations
n <- 10000
# Choose the string which you would like to encrypt and then decrypt using metropolis algorithm
giventext <- "this is a sample peice of text and i am really glad that this code can easily crack it"
decoded_text_best <- encrypt_decrypt_using_metropolis(giventext, n)
paste("The best decoded text reached in" , n , "iterations is: '")
decoded_text_best[[1]]
plot.ts(decoded_text_best[[2]])
decoded_text_best[[2]]
decoded_text_best[[2]][1]
decoded_text_best[[2]][9999]
giventext <- "a this is a sample peice of text and i am really glad that this code can easily crack it"
generate_cipher <- function() sample(letters,
replace = FALSE)
encode_text <- function(text, cipher) {
chartr(
x = text,
old = paste(letters, collapse = ""),
new = paste(cipher, collapse = "")
)
}
swap <- function(x){
# Select two distinct indices
rand_indices <- sample(1:length(x), size = 2, replace=FALSE)
element_1 <- x[rand_indices[1]]
element_2 <- x[rand_indices[2]]
x[rand_indices[1]] <- element_2
x[rand_indices[2]] <- element_1
return(x)
}
decode_this <- encode_text(giventext, generate_cipher())
split_text <- strsplit(decode_this, "")
len <- length(split_text[[1]])
current_cipher <- generate_cipher()
if(split_text[[1]][1] != " "  && split_text[[1]][2] == " "){
# which("w" == letters)
# letters[26]
num <- which(split_text[[1]][1] == letters)
check <- function(cipher){
if(!(current_cipher[1] == split_text[[1]][1] || current_cipher[9] == split_text[[1]][1])) {
current_cipher <- generate_cipher()
check(current_cipher)
return()
} else {
return()
}
}
}
