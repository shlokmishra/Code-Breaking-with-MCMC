new_sampling_way <- function(given_cipher){
all_possible_proposals <- matrix(NA,nrow = 326 ,ncol = 3)
# all_possible_proposals[1, 1:2] <- given_cipher
# all_possible_proposals[1, 27] <- get_log_lik_text(decode_text(ciphered_text, given_cipher))
# all_possible_proposals[1,]
iter = 1
for( i in 1:25){
for(j in (i+1):26){
iter = iter + 1
# temp_cipher <- given_cipher
# element_1 <- temp_cipher[i]
# element_2 <- temp_cipher[j]
#
# temp_cipher[i] <- element_2
# temp_cipher[j] <- element_1
all_possible_proposals[iter, 1] <- i
all_possible_proposals[iter, 2] <- j
temp_cipher <- swap_given_indicies(current_cipher,i,j)
all_possible_proposals[iter, 3] <- get_log_lik_text(decode_text(ciphered_text, temp_cipher))
}
}
all_scores <- as.numeric(all_possible_proposals[,3])
all_scores
prob <- exp(all_scores)/sum(exp(all_scores))
prob
new_proposal <- sample(1:326, size = 1, prob, replace = TRUE)
proposed_cipher <- all_possible_proposals[new_proposal, 1:26]
}
source("function.R")
setwd("~/code/Code-Breaking-with-MCMC")
source("function.R")
plaintext <- "the quick brown fox jumps over the lazy dog there are eight billion people in this world"
true_cipher <- generate_cipher()
ciphered_text <- encode_text(text = plaintext,
cipher = true_cipher)
current_cipher <- generate_cipher()
total_possibilities <- choose(26,2)
new_sampling_way <- function(given_cipher){
all_possible_proposals <- matrix(NA,nrow = 326 ,ncol = 3)
# all_possible_proposals[1, 1:2] <- given_cipher
# all_possible_proposals[1, 27] <- get_log_lik_text(decode_text(ciphered_text, given_cipher))
# all_possible_proposals[1,]
iter = 1
for( i in 1:25){
for(j in (i+1):26){
iter = iter + 1
# temp_cipher <- given_cipher
# element_1 <- temp_cipher[i]
# element_2 <- temp_cipher[j]
#
# temp_cipher[i] <- element_2
# temp_cipher[j] <- element_1
all_possible_proposals[iter, 1] <- i
all_possible_proposals[iter, 2] <- j
temp_cipher <- swap_given_indicies(current_cipher,i,j)
all_possible_proposals[iter, 3] <- get_log_lik_text(decode_text(ciphered_text, temp_cipher))
}
}
all_scores <- as.numeric(all_possible_proposals[,3])
all_scores
prob <- exp(all_scores)/sum(exp(all_scores))
prob
new_proposal <- sample(1:326, size = 1, prob, replace = TRUE)
proposed_cipher <- all_possible_proposals[new_proposal, 1:26]
}
all_possible_proposals
all_possible_proposals <- new_sampling_way(current_ciher)
all_possible_proposals <- new_sampling_way(current_ciher)
all_possible_proposals <- matrix(NA,nrow = 326 ,ncol = 3)
iter = 1
for( i in 1:25){
for(j in (i+1):26){
iter = iter + 1
all_possible_proposals[iter, 1] <- i
all_possible_proposals[iter, 2] <- j
temp_cipher <- swap_given_indicies(current_cipher,i,j)
all_possible_proposals[iter, 3] <- get_log_lik_text(decode_text(ciphered_text, temp_cipher))
}
}
all_possible_proposals
all_possible_proposals[1,1:2] <- c(1,2)
all_possible_proposals[1,3]<- get_log_lik_text(decode_text(ciphered_text, current_cipher))
all_possible_proposals
all_scores <- as.numeric(all_possible_proposals[,3])
all_possible_proposals
all_possible_proposals[1,1:2] <- c(1,1)
all_scores <- as.numeric(all_possible_proposals[,3])
# all_scores
prob <- exp(all_scores)/sum(exp(all_scores))
# prob
new_proposal <- sample(1:326, size = 1, prob, replace = TRUE)
indicies_to_swap <- all_possible_proposals[new_proposal, 1:2]
c(i,j) <- all_possible_proposals[new_proposal, 1:2]
proposed_cipher <- swap_given_indicies(current_cipher, indicies_to_swap[1], indicies_to_swap[2])
# all_scores
# prob <- exp(all_scores)/sum(exp(all_scores))
prob <- exp(all_scores)
# prob
new_proposal <- sample(1:326, size = 1, prob, replace = TRUE)
max(prob)
# all_scores
prob <- exp(all_scores)/sum(exp(all_scores))
# prob <- exp(all_scores)
max(prob)
which(prob = max(prob))
which(max(prob))
