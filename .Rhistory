## Example 1
v <- c(907,220,625,502)
v
## Example 2
v <- 2:6
v
## Example 8
M <- matrix(c(1,1,1,2,1,3,1,4),nrow=2,ncol=4)
M
M[1,]
M[,2]
r1 <- c(1, 1, 1, 1)
r2 <- c(1, 2, 3, 4)
M <- rbind(r1, r2)
M
c1 <- c(1, 1)
c2 <- c(1, 2)
c3 <- c(1, 3)
c4 <- c(1, 4)
M <- cbind(c1,c2,c3,c4)
M
M[2,3]
## Example 10
rep(0, 5)
rep(1,10)
## Example 13
diag(3)
library(ISLR)
data(Smarket)
#Smarket
head(Smarket)
#Smarket
head(Smarket)
tail(Smarket)
dim(Smarket)
## Example 9
#head(Smarket)
Smarket[2,]
M2 <- rbind(Smarket[3,], Smarket[4,], Smarket[7,], Smarket[9,], Smarket[10,])
M2
### Practical Applications
dim(Smarket)
x <- 1:1250
plot(x, Smarket[,2],type="l")
Smarket[1:242,2]
x[1:242]
plot(x[1:242], Smarket[1:242,2],type="l")
### Setting up library
library(matlib)
## Example 41
A <- matrix(c(1,2,1,1), nrow = 2, ncol = 2)
A
b <- c(4, 5)
b
Solve(A, b)
## Example 41
A <- matrix(c(1,2,1,1), ncol = 2, nrow = 2)
A
b <- c(4, 5)
b
Solve(A, b)
solve(A, b)
plotEqn(A,b)
A <- matrix(c(1,-2,1,-2), nrow = 2, ncol = 2)
A <- matrix(c(1,-2,1,-2), nrow = 2, ncol = 2)
A
b <- c(4, 5)
b
Solve(A, b)
solve(A, b)
plotEqn(A,b)
plotEqn(A,b)
plotEqn(A,b)
A <- matrix(c(1,-1,1,-1), nrow = 2, ncol = 2)
A
b <- c(4, -4)
b
Solve(A, b)
solve(A, b)
plotEqn(A,b)
## Example 42
A <- matrix(c(1,-2,-1,2,3,2,3,-2,1), nrow = 3, ncol = 3)
A
b <- c(6, -1, 2)
b
Solve(A, b)
solve(A, b)
plotEqn3d(A,b, xlim=c(0,4), ylim=c(0,4))
## Example 38
M <- matrix(c(1,0,1,0,1,0,0,1,0,1,1,0,0,1,0,1,475,489,542,422), nrow=4,ncol=5)
M
M2 <- M[,-5]
M2
## Example 43
A <- matrix(c(1,0,1,0,1,0,0,1,0,1,1,0,0,1,0,1),nrow=4,ncol=4)
b <- c(475, 489, 542,422)
Solve(A, b)
### Practical Applications
A <- matrix(c(1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 1), nrow = 11, ncol = 18, byrow = TRUE)
b <- c(1298, 1948, 465, 605, 451,  338,  260,  183,  282, 127, 535)
Solve(A, b)
### Setting up library
library(matlib)
## Example 44
A <- matrix(c(0, -1, 1, 0, 1, 1, 0, 1, 3, -4, 2, 0, -1, 0, 4, -4), 4, 4)
b <- c(1, 1, 5, -2)
showEqn(A, b)
echelon(A, b, verbose=TRUE, fractions=TRUE)
?echelon
showEqn(A, b)
rank(A)
## Example 44
A <- matrix(c(0, -1, 1, 0, 1, 1, 0, 1, 3, -4, 2, 0, -1, 0, 4, -4), 4, 4)
b <- c(1, 1, 5, -2)
showEqn(A, b)
echelon(A, b, verbose=TRUE, fractions=TRUE)
rank(A)
rank(A,b)
## Example 45
A <- matrix(c(0, -9, 4, 4, 5, 6, 3, 8, 4, 6, 0, 4, 7, 7, 5, 12), 4, 4)
b <- c(-9, -17, -3, 0)
showEqn(A, b)
## Example 46
A <- matrix(c(0, -9, 4, 4, 5, 6, 3, 8, 4, 6, 0, 4, 7, 7, 5, 12), 4, 4)
b <- c(-9, -17, -3, -12)
showEqn(A, b)
### Setting up library
library(matlib)
A <- matrix(c(1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0,
0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,
0, 1, 0, 0,  0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,  0, 0,
1, 0,  0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,
0, 0, 0, 1 ), nrow = 8, ncol = 16, byrow = TRUE)
b <- c(20, 22, 33, 21, 4, 13, 43, 36)
#b <- c(21.5, 20.9, 33.4, 22.1, 4.5, 14.2, 42.4, 62.9)
Solve(A, b)
### Library
library(magick)
inp_img <- image_read("http://polytopes.net/Tora_color.png")
image_info(inp_img)
plot(inp_img)
## Example 49
v1 <- c(2, -1, 3)
v2 <- c(-1, 0, 4)
v1 + v2
## Example 50
A <- matrix(c(3, 0, -5, -1, -3, 4), nrow = 2, ncol = 3, byrow = TRUE)
B <- matrix(c(-5, 5, 2, 1, -2, 0), nrow = 2, ncol = 3, byrow = TRUE)
A + B
A
## Example 53
A <- matrix(c(3, 0, -5, -1, -3, 4), nrow = 2, ncol = 3, byrow = TRUE)
A
-3 * A
## Example 56
v1 <- c(2, -1, 3)
v2 <- c(-1, 0, 4)
v1 %*% v2
mod_img <- image_modulate(inp_img, brightness = 120, saturation = 20, hue = 20)
plot(mod_img)
## Example 56
v1 <- c(2, -1, 3)
v2 <- c(-1, 0, 4)
v1 %*% v2
## Example 57
A <- matrix(c(3, 0, -5, -1, -3, 4), nrow = 2, ncol = 3, byrow = TRUE)
B <- matrix(c(-5, 5, 2, 1, -2, 0), nrow = 3, ncol = 2, byrow = TRUE)
A
B
A %*% B
## Example 59
A <- matrix(c(4, -1, -5, 0, 1, -2), 2, 3, byrow = TRUE)
A
t(A)
library(mvtnorm)
library(ggplot2)
library(matlib)
## Standard deviation
sigma <- matrix(c(4,2,2,3), ncol = 2, nrow = 2)
sigma
## Mean
mu <- c(1, 2)
n <- 1000
set.seed(123)
?rmvnorm()
x <- rmvnorm(n = n, mean = mu, sigma = sigma)
d <- data.frame(x)
library(mvtnorm)
library(ggplot2)
library(matlib)
## Standard deviation
sigma <- matrix(c(4,2,2,3), ncol = 2, nrow = 2)
## Mean
mu <- c(1, 2)
n <- 1000
set.seed(123)
x <- rmvnorm(n = n, mean = mu, sigma = sigma)
d <- data.frame(x)
p2 <- ggplot(d, aes(x = X1, y = X2)) + geom_point(alpha = .5) + geom_density_2d()
p2
y <- x - mu
x
y
View(x)
#E <- eigen(sigma)
#E$vectors
#y <- y %*% t(inv(E$vectors))
dd <- data.frame(y)
p3 <- ggplot(dd, aes(x = X1, y = X2)) + geom_point(alpha = .5) + geom_density_2d()
p3
A <- matrix(c(-4,-1,-3,-3,3,2), nrow = 2, ncol = 3)
B <- matrix(c(4,2,-1,-4,1,5), nrow = 2, ncol = 3)
C <- matrix(c(-5,-5,2,5,-4,-1), nrow = 2, ncol = 3)
A+B
A+B+C
B+C
a=-1
b=2
c=3
(a-b)*C
a*C-b*C
## Example 69
library(matlib)
A <- matrix(c(1,-2,-1,2,3,2,3,-2,1), nrow = 3, ncol = 3)
inv(A)
library(MASS)
fractions(inv(A))
## Remark 2.10
library(matlib)
A <- matrix(c(1,-2,-1,2,3,2,3,-2,1), nrow = 3, ncol = 3)
A
solve(A)
b=1:3
b
solve(A)%*%b
?solve
A <- matrix(c(1,-2,-1,2,3,2,3,-2,1), nrow = 3, ncol = 3)
B <- A+1
t(A+B)
t(A)+t(B)
inv(t(A))
t(inv(A))
### Practical Applications
A <- matrix(c(1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ,
1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1), nrow = 11, ncol = 18, byrow = TRUE)
### Practical Applications
A <- matrix(c(1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ,
1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1), nrow = 11, ncol = 18, byrow = TRUE)
b <- c(1298, 1948, 465 , 605 , 451 ,  338 , 260 ,  183 ,  282 ,  127 ,  535)
library(pracma)
rref(A)
C <- cbind(A, b)
E <- rref(C)
E <- E[-11,]
E
C <- cbind(A, b)
E <- rref(C)
E
E <- E[-11,]
E
G1 <- eye(8)
G1
G2 <- matrix(rep(0, 80), 8, 10)
G2
?eye
eye(3)
eye(3) == diag(3)
G2 <- matrix(rep(0, 80), 8, 10)
b2 <- c(266, 223, 140, 264, 137, 67, 130, 24)
G <- cbind(G1, G2, b2)
M <- rbind(E, G)
inv(M[,-19])
inv(M[, -19]) %*% M[, 19]
A <- matrix(c(1, 3, 2, 1, 2, 5, -2, -3, 2, 2, -3, -3, -4, -2, -1, 4), nrow = 4, ncol = 4, byrow=TRUE)
M <- cbind(A, diag(4))
library(pracma)
R <- rref(M)
Ainv <- R[, 5:8]
Ainv
A <- matrix(c(1, 3, 2, 1, 2, 5, -2, -3, 2, 2, -3, -3, -4, -2, -1, 4), nrow = 4, ncol = 4, byrow=TRUE)
A
M <- cbind(A, diag(4))
M
R <- rref(M)
R
Ainv <- R[, 5:8]
Ainv
Ainv
inv(A)
### Practical Applications
A <- matrix(c(1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ,
1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1), nrow = 11, ncol = 18, byrow = TRUE)
b <- c(1298, 1948, 465 , 605 , 451 ,  338 , 260 ,  183 ,  282 ,  127 ,  535)
library(pracma)
rref(A)
C <- cbind(A, b)
C
E <- rref(C)
C
G1 <- eye(8)
G2 <- matrix(rep(0, 80), 8, 10)
b2 <- c(266, 223, 140, 264, 137, 67, 130, 24)
G <- cbind(G1, G2, b2)
M <- rbind(E, G)
M2 <- M[,-19]
M3 <- cbind(M2, diag(18))
M4 <- rref(M3)
M4
library(png)
### You need download from http://polytopes.net/Tora_color.png and store the directory currently you are working on.
x <- readPNG("Tora_color.png")
dim(x)
head(x[,,1])
inp_img <- image_read("http://polytopes.net/Tora_color.png")
image_info(inp_img)
plot(inp_img)
mod_img <- image_rotate(inp_img, degrees=180)
plot(mod_img)
mod_img <- image_flip(inp_img)
plot(mod_img)
mod_img <- image_flop(inp_img)
plot(mod_img)
library(plotly)
x <- c(4, 1, 3, 0)
y <- c(0, 2, 5, 3)
z <- c(0, 5, 1, 0)
intensity <- c(0, 0.33, 0.66, 1)
p<- plot_ly(x = x, y = y, z = z,
type = "mesh3d",
intensity = intensity,
showscale = TRUE
)
p
?plot_ly
# library(dplyr)
# library(magrittr)
source("cipherFuncs.R")
setwd("~/GitHub/Code-Breaking-with-MCMC")
# library(dplyr)
# library(magrittr)
source("cipherFuncs.R")
source("metropFuncs.R")
###LOADING REQUIRED LIBRARIES AND SOURCING SOME FUNCTIONS & CPP FILES###
library(purrr)
library(Rcpp)
# library(dplyr)
# library(magrittr)
source("cipherFuncs.R")
source("metropFuncs.R")
source("metropFuncs.R")
source("metropFuncs.R")
sourceCpp("rcppAllProp.cpp")
source("metropFuncs.R")
# Choose a value of n which will be the number of iterations
n <- 50
# Choose the string which you would like to encrypt and then decrypt using metropolis algorithm
plainText <- "let us try to decode the encrypted sentence formed which actually seems to be gibberish"
trueCipher <- generateCipher()
cipheredText <- encodeText(text = plainText,
cipher = trueCipher)
decodedBestReg <- decryptMetropReg(cipheredText, n)
decodedBestModified <- decryptMetropModified(cipheredText, 1e2)
